


class CommonWidgets {

  // Левая панель для desktop версии
  static Widget buildLeftPanel({
    required BuildContext context,
    required bool isDarkMode,
    required String title,
    required String subtitle,
    required IconData logoIcon,
    required IconData floatingIcon1,
    required IconData floatingIcon2,
    required IconData floatingIcon3,
    required IconData ballIcon1,
    required IconData ballIcon2,
    required IconData ballIcon3,
    required IconData ballIcon4,
  }) {
    return Container(
      width: AppResponsive.isDesktop(context) ? 550 : 400,
      decoration: BoxDecoration(
        color: AppColorUtils.getBackgroundColor(isDarkMode),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.4),
            blurRadius: 50,
            offset: const Offset(20, 0),
          ),
        ],
      ),
      child: Stack(
        children: [
          // Звезды по всему экрану
          _buildStar(50, 80, 2, 3),
          _buildStar(120, 150, 1.5, 4),
          _buildStar(200, 60, 1, 2),
          _buildStar(80, 200, 2.5, 5),
          _buildStar(180, 120, 1.8, 3),
          _buildStar(40, 180, 1.2, 4),
          _buildStar(160, 80, 2.2, 3),
          _buildStar(100, 100, 1.6, 4),
          _buildStar(220, 160, 1.4, 2),
          _buildStar(60, 140, 2.8, 5),

          // Шарики по всему экрану
          _buildAnimatedBall(80, 100, 12, 6, ballIcon1, AppColors.desktopPrimary),
          _buildAnimatedBall(420, 150, 10, 4, ballIcon2, AppColors.desktopSecondary),
          _buildAnimatedBall(50, 400, 14, 7, ballIcon3, AppColors.desktopSuccess),
          _buildAnimatedBall(480, 450, 11, 5, ballIcon4, AppColors.desktopAccent),
          _buildAnimatedBall(200, 80, 9, 5, Icons.star, AppColors.desktopWarning),
          _buildAnimatedBall(350, 350, 13, 6, Icons.favorite, AppColors.desktopError),
          _buildAnimatedBall(150, 450, 10, 4, Icons.bolt, AppColors.desktopAccent),
          _buildAnimatedBall(450, 80, 8, 5, Icons.diamond, AppColors.desktopPrimary),

          // Плавающие планеты
          _buildFloatingPlanet(
            60, 40, 50, 8, floatingIcon1, 20,
            AppColors.desktopPrimary, AppColors.desktopSecondary,
          ),
          _buildFloatingPlanet(
            400, 80, 35, 6, floatingIcon2, 16,
            AppColors.desktopAccent, AppColors.desktopSecondary,
          ),
          _buildFloatingPlanet(
            80, 300, 70, 10, floatingIcon3, 25,
            AppColors.desktopSuccess, AppColors.desktopAccent,
          ),
          _buildFloatingPlanet(
            350, 250, 45, 7, Icons.auto_awesome, 18,
            AppColors.desktopWarning, AppColors.desktopPrimary,
          ),
          _buildFloatingPlanet(
            120, 180, 55, 9, Icons.trending_up, 22,
            AppColors.desktopAccent, AppColors.desktopSuccess,
          ),

          // Основной контент (логотип и текст) - точно в центре
          Center(
            child: Container(
              padding: const EdgeInsets.all(50),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  // Анимированный логотип
                  buildAnimatedLogo(
                    icon: logoIcon,
                    isDarkMode: isDarkMode,
                  ),

                  const SizedBox(height: 40),

                  // Заголовок
                  buildAnimatedTitle(
                    title: title,
                    isDarkMode: isDarkMode,
                  ),

                  const SizedBox(height: 20),

                  // Подзаголовок
                  buildAnimatedSubtitle(
                    subtitle: subtitle,
                    isDarkMode: isDarkMode,
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  // Метод для создания звезд
  static Widget _buildStar(double left, double top, double size, int duration) {
    return Positioned(
      left: left,
      top: top,
      child: TweenAnimationBuilder<double>(
        duration: Duration(seconds: duration),
        tween: Tween(begin: 0.0, end: 1.0),
        builder: (context, value, child) {
          return Transform.scale(
            scale: 0.5 + (0.5 * value),
            child: Opacity(
              opacity: 0.3 + (0.7 * value),
              child: Container(
                width: size,
                height: size,
                decoration: BoxDecoration(
                  shape: BoxShape.circle,
                  color: AppColors.desktopPrimary.withOpacity(0.9),
                  boxShadow: [
                    BoxShadow(
                      color: AppColors.desktopPrimary.withOpacity(0.7),
                      blurRadius: 6,
                      spreadRadius: 2,
                    ),
                  ],
                ),
              ),
            ),
          );
        },
      ),
    );
  }

  // Метод для создания анимированных шариков с иконками
  static Widget _buildAnimatedBall(
      double left,
      double top,
      double size,
      int duration,
      IconData icon,
      Color color,
      ) {
    return Positioned(
      left: left,
      top: top,
      child: TweenAnimationBuilder<double>(
        duration: Duration(seconds: duration),
        tween: Tween(begin: 0.0, end: 1.0),
        builder: (context, value, child) {
          // Разные типы движения для разных шариков
          double moveX = 0;
          double moveY = 0;

          // Определяем тип движения на основе позиции
          if (left < 100) {
            // Левые шарики - движение вправо
            moveX = 20 * (value - 0.5);
            moveY = 15 * (value - 0.5);
          } else if (left > 400) {
            // Правые шарики - движение влево
            moveX = -20 * (value - 0.5);
            moveY = -15 * (value - 0.5);
          } else {
            // Центральные шарики - круговое движение
            moveX = 15 * (value - 0.5);
            moveY = 25 * (value - 0.5);
          }

          return Transform.translate(
            offset: Offset(moveX, moveY),
            child: Transform.rotate(
              angle: value * 2 * 3.14159,
              child: Container(
                width: size,
                height: size,
                decoration: BoxDecoration(
                  shape: BoxShape.circle,
                  gradient: RadialGradient(
                    colors: [
                      color.withOpacity(0.6),
                      color.withOpacity(0.3),
                      Colors.transparent,
                    ],
                  ),
                  border: Border.all(color: color.withOpacity(0.7), width: 1.5),
                  boxShadow: [
                    BoxShadow(
                      color: color.withOpacity(0.4),
                      blurRadius: 8,
                      spreadRadius: 2,
                    ),
                  ],
                ),
                child: Icon(icon, color: Colors.white, size: size * 0.5),
              ),
            ),
          );
        },
      ),
    );
  }

  // Метод для создания плавающих планет
  static Widget _buildFloatingPlanet(
      double top,
      double left,
      double size,
      int duration,
      IconData icon,
      double iconSize,
      Color primaryColor,
      Color secondaryColor,
      ) {
    return Positioned(
      top: top,
      left: left,
      child: TweenAnimationBuilder<double>(
        duration: Duration(seconds: duration),
        tween: Tween(begin: 0.0, end: 1.0),
        builder: (context, value, child) {
          return Transform.translate(
            offset: Offset(0, 30 * (value - 0.5)),
            child: Container(
              width: size,
              height: size,
              decoration: BoxDecoration(
                shape: BoxShape.circle,
                gradient: RadialGradient(
                  colors: [
                    primaryColor.withOpacity(0.4),
                    secondaryColor.withOpacity(0.2),
                    Colors.transparent,
                  ],
                ),
                border: Border.all(
                  color: primaryColor.withOpacity(0.5),
                  width: 1,
                ),
              ),
              child: Icon(
                icon,
                color: Colors.white,
                size: iconSize,
              ),
            ),
          );
        },
      ),
    );
  }

  // Метод для создания анимированного логотипа
  static Widget buildAnimatedLogo({
    required IconData icon,
    required bool isDarkMode,
    double size = 100,
    double iconSize = 45,
  }) {
    return TweenAnimationBuilder<double>(
      duration: const Duration(seconds: 2),
      tween: Tween(begin: 0.0, end: 1.0),
      builder: (context, value, child) {
        return Transform.scale(
          scale: 0.8 + (0.2 * value),
          child: Container(
            width: size,
            height: size,
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(25),
              color: AppColorUtils.getCardColor(isDarkMode),
              border: Border.all(
                color: AppColorUtils.getBorderColor(isDarkMode),
                width: 1,
              ),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.1),
                  blurRadius: 20,
                  offset: const Offset(0, 8),
                ),
                BoxShadow(
                  color: AppColors.desktopPrimary.withOpacity(0.05),
                  blurRadius: 40,
                  offset: const Offset(0, 16),
                ),
              ],
            ),
            child: Icon(
              icon,
              size: iconSize,
              color: AppColors.desktopPrimary,
            ),
          ),
        );
      },
    );
  }

  // Метод для создания анимированного заголовка
  static Widget buildAnimatedTitle({
    required String title,
    required bool isDarkMode,
    double fontSize = 48,
    TextAlign textAlign = TextAlign.center,
  }) {
    return TweenAnimationBuilder<double>(
      duration: const Duration(milliseconds: 1500),
      tween: Tween(begin: 0.0, end: 1.0),
      builder: (context, value, child) {
        return Transform.translate(
          offset: Offset(0, 20 * (1 - value)),
          child: Opacity(
            opacity: value,
            child: Text(
              title,
              textAlign: textAlign,
              style: TextStyle(
                fontSize: fontSize,
                fontWeight: FontWeight.w900,
                color: isDarkMode ? Colors.white : AppColorUtils.getTextColor(isDarkMode),
                letterSpacing: 2.0,
                shadows: isDarkMode ? [
                  Shadow(
                    color: Colors.black.withOpacity(0.3),
                    offset: const Offset(0, 2),
                    blurRadius: 4,
                  ),
                ] : null,
              ),
            ),
          ),
        );
      },
    );
  }

  // Метод для создания анимированного подзаголовка
  static Widget buildAnimatedSubtitle({
    required String subtitle,
    required bool isDarkMode,
    double fontSize = 18,
    TextAlign textAlign = TextAlign.center,
  }) {
    return TweenAnimationBuilder<double>(
      duration: const Duration(milliseconds: 1800),
      tween: Tween(begin: 0.0, end: 1.0),
      builder: (context, value, child) {
        return Transform.translate(
          offset: Offset(0, 15 * (1 - value)),
          child: Opacity(
            opacity: value,
            child: Text(
              subtitle,
              textAlign: textAlign,
              style: TextStyle(
                fontSize: fontSize,
                color: isDarkMode
                    ? Colors.white.withOpacity(0.8)
                    : AppColorUtils.getHintColor(isDarkMode),
                fontWeight: FontWeight.w400,
                letterSpacing: 1.0,
              ),
            ),
          ),
        );
      },
    );
  }

  // Кнопка назад
  static Widget backButton({
    required bool isDarkMode,
    required VoidCallback onTap,
  }) {
    return Container(
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(12),
        color: AppColorUtils.getCardColor(isDarkMode),
        border: Border.all(color: AppColorUtils.getBorderColor(isDarkMode)),
        boxShadow: AppShadows.getCardShadow(isDarkMode),
      ),
      child: IconButton(
        onPressed: onTap,
        icon: Icon(
          Icons.arrow_back_ios,
          color: AppColorUtils.getTextColor(isDarkMode),
          size: 18,
        ),
      ),
    );
  }



  // Универсальный чекбокс для всех платформ
  static Widget universalCheckbox({
    required bool value,
    required VoidCallback onTap,
    required bool isDarkMode,
    double size = 20,
    bool isDesktop = false,
  }) {
    final borderRadius = isDesktop ? 4.0 : 6.0;
    final borderWidth = isDesktop ? 1.5 : 2.0;
    final iconSize = isDesktop ? 12.0 : 14.0;
    final gradient = isDesktop ? AppGradients.desktopGradient : AppGradients.primaryGradientTwo;

    return GestureDetector(
      onTap: onTap,
      child: Container(
        width: size,
        height: size,
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(borderRadius),
          gradient: value ? gradient : null,
          border: Border.all(
            color: value ? Colors.transparent : AppColorUtils.getBorderColor(isDarkMode),
            width: borderWidth,
          ),
        ),
        child: value
            ? Icon(
          Icons.check,
          color: Colors.white,
          size: iconSize,
        )
            : null,
      ),
    );
  }

  // Универсальный ряд ссылки внизу страницы (для всех форм)
  static Widget bottomLinkRow({
    required String questionText,
    required String actionText,
    required VoidCallback onTap,
    required bool isDarkMode,
    bool isDesktop = false,
  }) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(12),
        color: AppColorUtils.getBackgroundColor(isDarkMode),
        border: Border.all(
          color: AppColorUtils.getBorderColor(isDarkMode),
        ),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Text(
            questionText,
            style: TextStyle(
              color: AppColorUtils.getHintColor(isDarkMode),
              fontSize: 14,
              fontWeight: FontWeight.w500,
            ),
          ),
          GestureDetector(
            onTap: onTap,
            child: Container(
              padding: const EdgeInsets.symmetric(
                horizontal: 12,
                vertical: 6,
              ),
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(12),
                gradient: AppGradients.desktopGradient,
              ),
              child: Text(
                actionText,
                style: TextStyle(
                  fontSize: 13,
                  fontWeight: FontWeight.w700,
                  color: Colors.white,
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }



  // Универсальная кнопка действия для desktop и mobile
  static Widget actionButton({
    required VoidCallback? onPressed,
    required bool isLoading,
    required String text,
    double height = 40,
  }) {
    return Container(
      height: height,
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(16),
        gradient: AppGradients.desktopGradient,
        boxShadow: [
          BoxShadow(
            color: AppColors.desktopPrimary.withOpacity(0.3),
            blurRadius: 12,
            offset: const Offset(0, 6),
          ),
        ],
      ),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          onTap: isLoading ? null : onPressed,
          borderRadius: BorderRadius.circular(16),
          child: Center(
            child: isLoading
                ? SizedBox(
              height: 20,
              width: 20,
              child: CircularProgressIndicator(
                strokeWidth: 2,
                valueColor: const AlwaysStoppedAnimation<Color>(Colors.white),
              ),
            )
                : Text(
              text,
              style: TextStyle(
                fontSize: 15,
                fontWeight: FontWeight.w700,
                color: Colors.white,
                letterSpacing: 0.5,
              ),
            ),
          ),
        ),
      ),
    );
  }

  // Правая панель с формой для desktop версии
  static Widget buildRightPanel({
    required BuildContext context,
    required bool isDarkMode,
    required String title,
    required String subtitle,
    required Widget formContent,
    required Widget bottomLink,
    required VoidCallback? onButtonPressed,
    required String buttonText,
    required bool isLoading,
  }) {
    return Expanded(
      child: Container(
        decoration: BoxDecoration(
          color: AppColorUtils.getBackgroundColor(isDarkMode),
        ),
        child: Center(
          child: Container(
            constraints: const BoxConstraints(maxWidth: 480),
            padding: const EdgeInsets.only(top: 32, right: 32, left: 32),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                Container(
                  margin: const EdgeInsets.symmetric(vertical: 10),
                  height: MediaQuery.of(context).size.height * 0.9,
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(25),
                    color: AppColorUtils.getCardColor(isDarkMode),
                    border: Border.all(
                      color: AppColorUtils.getBorderColor(isDarkMode),
                      width: 1,
                    ),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withOpacity(0.1),
                        blurRadius: 20,
                        offset: const Offset(0, 8),
                      ),
                      BoxShadow(
                        color: AppColors.desktopPrimary.withOpacity(0.05),
                        blurRadius: 40,
                        offset: const Offset(0, 16),
                      ),
                    ],
                  ),
                  child: SingleChildScrollView(
                    padding: const EdgeInsets.all(24),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.stretch,
                      children: [
                        // Заголовок
                        Text(
                          title,
                          style: TextStyle(
                            fontSize: 24,
                            fontWeight: FontWeight.w800,
                            color: AppColorUtils.getTextColor(isDarkMode),
                            letterSpacing: 0.5,
                          ),
                          textAlign: TextAlign.center,
                        ),

                        const SizedBox(height: 6),

                        Text(
                          subtitle,
                          style: TextStyle(
                            fontSize: 13,
                            color: AppColorUtils.getHintColor(isDarkMode),
                            fontWeight: FontWeight.w400,
                            height: 1.3,
                          ),
                          textAlign: TextAlign.center,
                        ),

                        const SizedBox(height: 20),

                        // Содержимое формы
                        formContent,

                        const SizedBox(height: 16),

                        // Кнопка действия
                        actionButton(
                          onPressed: onButtonPressed,
                          isLoading: isLoading,
                          text: buttonText,
                        ),

                        const SizedBox(height: 16),

                        // Нижняя ссылка
                        bottomLink,
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  // Универсальный TextField с поддержкой desktop и mobile дизайна
  static Widget universalTextField({
    required TextEditingController controller,
    required String hintText,
    required IconData icon,
    required bool isDarkMode,
    TextInputType? keyboardType,
    bool isPassword = false,
    bool? isPasswordVisible,
    VoidCallback? onPasswordToggle,
    String? Function(String?)? validator,
    bool isDesktop = false,
  }) {
    // Определяем стили в зависимости от режима
    final fontSize = isDesktop ? 15.0 : 16.0;
    final fontWeight = FontWeight.w500;
    final hintFontSize = isDesktop ? 15.0 : 16.0;
    final hintFontWeight = FontWeight.w400;
    final iconSize = isDesktop ? 20.0 : 22.0;
    final horizontalPadding = isDesktop ? 16.0 : 20.0;
    final verticalPadding = isDesktop ? 14.0 : 18.0;
    final borderRadius = 16.0;

    // Единый виджет с focus и error эффектами для обоих режимов
    return Focus(
      onFocusChange: (hasFocus) {},
      child: Builder(
        builder: (context) {
          final isFocused = Focus.of(context).hasFocus;
          final hasError = validator != null &&
              validator(controller.text) != null &&
              controller.text.isNotEmpty;

          Color borderColor;
          if (hasError) {
            borderColor = AppColors.errorColor;
          } else if (isFocused) {
            borderColor = isDesktop ? AppColors.desktopPrimary : AppColors.primaryGradientStart;
          } else {
            borderColor = AppColorUtils.getBorderColor(isDarkMode);
          }

          List<BoxShadow> shadows;
          if (isFocused) {
            shadows = isDesktop ? AppShadows.getDesktopFocusShadow() : AppShadows.getFocusShadow();
          } else if (hasError) {
            shadows = isDesktop ? AppShadows.getDesktopErrorShadow() : AppShadows.getErrorShadow();
          } else {
            shadows = isDesktop ? AppShadows.getDesktopCardShadow() : AppShadows.getCardShadow(isDarkMode);
          }

          return Container(
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(borderRadius),
              color: isDesktop ? AppColorUtils.getBackgroundColor(isDarkMode) : AppColorUtils.getCardColor(isDarkMode),
              border: Border.all(
                color: borderColor,
                width: isFocused || hasError ? 2.0 : 1.5,
              ),
              boxShadow: shadows,
            ),
            child: _buildTextFormField(
              controller: controller,
              hintText: hintText,
              icon: icon,
              isDarkMode: isDarkMode,
              keyboardType: keyboardType,
              isPassword: isPassword,
              isPasswordVisible: isPasswordVisible,
              onPasswordToggle: onPasswordToggle,
              validator: validator,
              fontSize: fontSize,
              fontWeight: fontWeight,
              hintFontSize: hintFontSize,
              hintFontWeight: hintFontWeight,
              iconSize: iconSize,
              horizontalPadding: horizontalPadding,
              verticalPadding: verticalPadding,
              isDesktop: isDesktop,
              isFocused: isFocused,
              hasError: hasError,
            ),
          );
        },
      ),
    );
  }

  // Вспомогательный метод для создания TextFormField
  static Widget _buildTextFormField({
    required TextEditingController controller,
    required String hintText,
    required IconData icon,
    required bool isDarkMode,
    TextInputType? keyboardType,
    bool isPassword = false,
    bool? isPasswordVisible,
    VoidCallback? onPasswordToggle,
    String? Function(String?)? validator,
    required double fontSize,
    required FontWeight fontWeight,
    required double hintFontSize,
    required FontWeight hintFontWeight,
    required double iconSize,
    required double horizontalPadding,
    required double verticalPadding,
    required bool isDesktop,
    bool? isFocused,
    bool? hasError,
  }) {
    // Определяем цвет иконки в зависимости от режима и состояния
    Color iconColor;
    if (hasError == true) {
      iconColor = AppColors.errorColor;
    } else if (isFocused == true) {
      iconColor = isDesktop ? AppColors.desktopPrimary : AppColors.primaryGradientStart;
    } else {
      iconColor = isDesktop
          ? AppColors.desktopPrimary.withOpacity(0.7)
          : AppColors.primaryGradientStart.withOpacity(0.8);
    }

    return TextFormField(
      controller: controller,
      style: TextStyle(
        color: AppColorUtils.getTextColor(isDarkMode),
        fontSize: fontSize,
        fontWeight: fontWeight,
      ),
      keyboardType: keyboardType,
      obscureText: isPassword ? !(isPasswordVisible ?? false) : false,
      decoration: InputDecoration(
        hintText: hintText,
        hintStyle: TextStyle(
          color: AppColorUtils.getHintColor(isDarkMode),
          fontSize: hintFontSize,
          fontWeight: hintFontWeight,
        ),
        prefixIcon: Icon(
          icon,
          color: iconColor,
          size: iconSize,
        ),
        suffixIcon: isPassword
            ? IconButton(
          icon: Icon(
            isPasswordVisible ?? false ? Icons.visibility_off : Icons.visibility,
            color: AppColorUtils.getHintColor(isDarkMode),
            size: iconSize,
          ),
          onPressed: onPasswordToggle,
        )
            : null,
        border: InputBorder.none,
        contentPadding: EdgeInsets.symmetric(
          horizontal: horizontalPadding,
          vertical: verticalPadding,
        ),
        errorStyle: AppTextStyles.getErrorTextStyle(),
      ),
      validator: validator,
    );
  }

  // Универсальный ряд "Запомнить меня" + "Забыли пароль?" (единый стиль для всех платформ)
  static Widget rememberForgotRow({
    required bool rememberValue,
    required VoidCallback onRememberTap,
    required bool isDarkMode,
    required VoidCallback onForgotTap,
  }) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        // Запомнить меня
        Row(
          children: [
            CommonWidgets.universalCheckbox(
              value: rememberValue,
              onTap: onRememberTap,
              isDarkMode: isDarkMode,
            ),
            const SizedBox(width: 10),
            Text(
              'Запомнить меня',
              style: TextStyle(
                color: AppColorUtils.getHintColor(isDarkMode),
                fontSize: 15,
                fontWeight: FontWeight.w500,
              ),
            ),
          ],
        ),
        // Забыли пароль
        GestureDetector(
          onTap: onForgotTap,
          child: Container(
            padding: const EdgeInsets.symmetric(
              horizontal: 12,
              vertical: 6,
            ),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(20),
              gradient: AppGradients.primaryGradientWithOpacity(0.2),
              border: Border.all(
                color: AppColors.primaryGradientStart.withOpacity(0.3),
              ),
            ),
            child: Text(
              'Забыли пароль?',
              style: TextStyle(
                color: AppColors.primaryGradientStart,
                fontSize: 14,
                fontWeight: FontWeight.w600,
              ),
            ),
          ),
        ),
      ],
    );
  }

  // Универсальный ряд согласия с условиями
  static Widget termsAgreementRow({
    required bool value,
    required VoidCallback onTap,
    required bool isDarkMode,
    bool isDesktop = false,
  }) {
    return Row(
      children: [
        CommonWidgets.universalCheckbox(
          value: value,
          onTap: onTap,
          isDarkMode: isDarkMode,
          isDesktop: isDesktop,
        ),
        SizedBox(width: isDesktop ? 8 : 12),
        Expanded(
          child: RichText(
            text: TextSpan(
              style: TextStyle(
                color: AppColorUtils.getHintColor(isDarkMode),
                fontSize: isDesktop ? 12 : 14,
                height: 1.3,
              ),
              children: [
                const TextSpan(text: 'Я согласен с '),
                TextSpan(
                  text: 'условиями',
                  style: TextStyle(
                    color: isDesktop ? AppColors.desktopPrimary : AppColors.primaryGradientStart,
                    fontWeight: FontWeight.w600,
                  ),
                ),
                const TextSpan(text: ' и '),
                TextSpan(
                  text: 'политикой',
                  style: TextStyle(
                    color: isDesktop ? AppColors.desktopPrimary : AppColors.primaryGradientStart,
                    fontWeight: FontWeight.w600,
                  ),
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }
}

class CustomTextButton extends StatelessWidget {
  final String text;
  final Function()? onPressed;

  const CustomTextButton({
    super.key,
    required this.text,
    required this.onPressed,
  });

  @override
  Widget build(BuildContext context) {
    return TextButton(
      onPressed: onPressed,
      child: Text(text),
    );
  }
}

class CustomTextField extends StatelessWidget {
  final String label;
  final TextEditingController controller;
  final IconData icon;
  final bool obscureText;
  final FormFieldValidator<String>? validator;

  const CustomTextField({
    super.key,
    required this.label,
    required this.controller,
    required this.icon,
    this.obscureText = false,
    this.validator,
  });

  @override
  Widget build(BuildContext context) {
    return TextFormField(
      controller: controller,
      obscureText: obscureText,
      validator: validator ?? _getDefaultValidator(label),
      decoration: InputDecoration(
        labelText: label,
        prefixIcon: Icon(icon, color: const Color(0xFF6C63FF)),
        filled: true,
        fillColor: const Color(0xFFF4F7FF),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(14),
          borderSide: BorderSide.none,
        ),
      ),
    );
  }

  FormFieldValidator<String> _getDefaultValidator(String label) {
    return (value) {
      if (value == null || value.isEmpty) {
        return '$label is required';
      }

      switch (label.toLowerCase()) {
        case 'email':
          if (!RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$').hasMatch(value)) {
            return 'Please enter a valid email';
          }
          break;
        case 'password':
          if (value.length < 6) {
            return 'Password must be at least 6 characters';
          }
          break;
        case 'phone':
          if (!RegExp(r'^\+?[\d\s-]{10,}$').hasMatch(value)) {
            return 'Please enter a valid phone number';
          }
          break;
        case 'name':
          if (value.length < 2) {
            return 'Name must be at least 2 characters';
          }
          break;
      }

      return null;
    };
  }
}

class GradientButton extends StatelessWidget {
  final bool isLoading;
  final String text;
  final Function()? onTap;

  const GradientButton({
    super.key,
    required this.text,
    required this.onTap,
    this.isLoading = false,
  });

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        width: double.infinity,
        height: 50,
        alignment: Alignment.center,
        decoration: BoxDecoration(
          gradient: const LinearGradient(
            colors: [Color(0xFF6C63FF), Color(0xFF4DD0E1)],
          ),
          borderRadius: BorderRadius.circular(15),
          boxShadow: [
            BoxShadow(
              color: const Color(0xFF6C63FF).withOpacity(.35),
              blurRadius: 12,
              offset: const Offset(0, 6),
            ),
          ],
        ),
        child:isLoading ? const CircularProgressIndicator(color: Colors.white,) : Text(
          text,
          style: Theme.of(context).textTheme.labelLarge?.copyWith(
            color: Colors.white,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
    );
  }
}